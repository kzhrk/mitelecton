import { app, Menu, Tray, shell, Notification } from 'electron'
import { initTray, openEditor } from './util'
import MiterasClient from './MiterasClient'
import store from './config'

let tray: Tray | null = null

// store.get„Çíts-ignore„Åô„Çã„Åü„ÇÅ„ÅÆ„É°„ÇΩ„ÉÉ„Éâ üò¢
function storeGet(key: string): string {
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  return store.get(key)
}

// Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„Çí„ÉÜ„Ç≠„Çπ„Éà„Ç®„Éá„Ç£„Çø„ÅßÈñã„Åè
function openConfigFile(): void {
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  openEditor(store.path)
}

// „Éá„Çπ„ÇØ„Éà„ÉÉ„ÉóÈÄöÁü•„ÅÆ„Éò„É´„Éë„ÉºÈñ¢Êï∞
function showNotification(title: string, body: string): void {
  new Notification({ title, body }).show()
}

function miterasUrl(): string {
  return `https://kintai.miteras.jp/${storeGet('companyAlias')}/`
}

// „Çµ„Ç§„Éà„ÇíÈñã„Åè
function openBrowser(): void {
  const url = `${miterasUrl()}login`
  shell.openExternal(url).catch((error) => {
    console.error('Failed to open URL:', error)
  })
}

// Âá∫Á§æÊâìÂàª„ÇíÂÆüË°å
function clockIn(condition: number): void {
  const cli = new MiterasClient(miterasUrl(), storeGet('username'), storeGet('password'))
  cli
    .login()
    .then(() => cli.clockIn(condition).then())
    .catch((error) => {
      console.error(error)
      showNotification('Âá∫Á§æÊâìÂàª„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ', error.message)
    })
}

// ÈÄÄÁ§æÊâìÂàª„ÇíÂÆüË°å
function clockOut(condition: number): void {
  const cli = new MiterasClient(miterasUrl(), storeGet('username'), storeGet('password'))
  cli
    .login()
    .then(() => cli.clockOut(condition).then())
    .catch((error) => {
      console.error(error)
      showNotification('ÈÄÄÁ§æÊâìÂàª„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ', error.message)
    })
}

app.whenReady().then(() => {
  // „Çø„Çπ„ÇØ„Éê„Éº„Éà„É¨„Ç§„ÅÆ„Ç¢„Ç§„Ç≥„É≥„Å®„É°„Éã„É•„ÉºË®≠ÂÆö
  const contextMenu = Menu.buildFromTemplate([
    { label: 'Âá∫Á§æÊâìÂàª(Best)', click: (): void => clockIn(MiterasClient.CONDITION_BEST) },
    { label: 'Âá∫Á§æÊâìÂàª(Good)', click: (): void => clockIn(MiterasClient.CONDITION_GOOD) },
    { label: 'Âá∫Á§æÊâìÂàª(Normal)', click: (): void => clockIn(MiterasClient.CONDITION_NORMAL) },
    { label: 'Âá∫Á§æÊâìÂàª(Bad)', click: (): void => clockIn(MiterasClient.CONDITION_BAD) },
    { type: 'separator' },
    { label: 'ÈÄÄÁ§æÊâìÂàª(Best)', click: (): void => clockOut(MiterasClient.CONDITION_BEST) },
    { label: 'ÈÄÄÁ§æÊâìÂàª(Good)', click: (): void => clockOut(MiterasClient.CONDITION_GOOD) },
    { label: 'ÈÄÄÁ§æÊâìÂàª(Normal)', click: (): void => clockOut(MiterasClient.CONDITION_NORMAL) },
    { label: 'ÈÄÄÁ§æÊâìÂàª(Bad)', click: (): void => clockOut(MiterasClient.CONDITION_BAD) },
    { type: 'separator' },
    { label: 'Miteras„ÇíÈñã„Åè', click: openBrowser },
    { label: 'Áí∞Â¢ÉË®≠ÂÆö', click: openConfigFile },
    { label: 'ÁµÇ‰∫Ü', role: 'quit' }
  ])

  tray = initTray()
  tray.setContextMenu(contextMenu)

  if (!app.getLoginItemSettings().openAtLogin) app.setLoginItemSettings({ openAtLogin: true })
  app.setAppUserModelId('com.electron')
})
